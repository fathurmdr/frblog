// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  username      String?   @unique
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamptz()

  accounts  Account[]
  sessions  Session[]
  userRoles UserRole[]
  posts     Post[]
  comments  PostComment[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum RoleType {
  admin
}

model UserRole {
  id     String   @id @default(uuid())
  userId String   @map("user_id")
  type   RoleType

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade)

  @@map("user_roles")
}

model Post {
  id          Int      @id @default(autoincrement())
  authorId    String   @map("author_id")
  title       String
  slug        String
  coverImage  String   @map("cover_image")
  isPublished Boolean  @default(false) @map("is_published")
  publishedAt DateTime @map("publsihed_at") @db.Timestamptz()
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  author   User          @relation(fields: [authorId], references: [id], onUpdate: Cascade)
  contents PostContent[]
  comments PostComment[]
  chapters Chapter[]

  @@map("posts")
}

model PostContent {
  id     Int    @id @default(autoincrement())
  postId Int    @map("post_id")
  text   String
  page   Int

  post Post @relation(fields: [postId], references: [id], onUpdate: Cascade)

  @@map("post_contents")
}

model PostComment {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  postId    Int      @map("post_id")
  commentId Int?     @map("comment_id")
  text      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  user    User          @relation(fields: [userId], references: [id], onUpdate: Cascade)
  post    Post          @relation(fields: [postId], references: [id], onUpdate: Cascade)
  comment PostComment?  @relation("ReplyComment", fields: [commentId], references: [id], onUpdate: Cascade)
  replies PostComment[] @relation("ReplyComment")

  @@map("post_comments")
}

model Series {
  id         Int    @id @default(autoincrement())
  title      String
  slug       String
  coverImage String @map("cover_image")

  chapters Chapter[]

  @@map("series")
}

model Chapter {
  id       Int @id @default(autoincrement())
  seriesId Int @map("series_id")
  postId   Int @map("post_id")
  number   Int

  series Series @relation(fields: [seriesId], references: [id], onUpdate: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onUpdate: Cascade)

  @@map("chapters")
}
